server.port=9012
spring.application.name=openapi
info.app.name=${spring.application.name}

spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.testWhileIdle = true
spring.datasource.timeBetweenEvictionRunsMillis = 3600000
spring.datasource.validationQuery = SELECT 1

#postgres
spring.datasource.username=postgres
spring.datasource.password=P@ssw0rd321
spring.datasource.url=jdbc:postgresql://10.100.113.53:5432/openapi-svc
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.ddl-auto=validate

#maximum number of milliseconds that a client will wait for a connection
spring.datasource.hikari.connection-timeout = 20000
#minimum number of idle connections maintained by HikariCP in a connection pool
spring.datasource.hikari.minimum-idle= 10
#maximum pool size
spring.datasource.hikari.maximum-pool-size= 10
#maximum idle time for connection
spring.datasource.hikari.idle-timeout=10000
#maximum lifetime in milliseconds of a connection in the pool after it is closed.
spring.datasource.hikari.max-lifetime= 1000
#default auto-commit behavior.
spring.datasource.hikari.auto-commit =true

#redis-docker
spring.redis.ip=10.100.111.34
#spring.redis.password=docker
spring.redis.port=6379

logging.path=file:./log/
logging.file=log/spring.log

spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://10.100.113.12:8080/realms/master/protocol/openid-connect/certs

eureka.client.serviceUrl.defaultZone=http://${EUREKA_HOST:10.100.113.12}:${EUREKA_PORT:8761}/eureka
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
eureka.instance.hostname=${EUREKA_HOSTNAME:openapi}
eureka.instance.prefer-ip-address=true

elastic.apm.enabled=true
elastic.apm.server-url=http://10.100.113.51:8200
elastic.apm.service-name=${spring.application.name}
elastic.apm.environment=production
elastic.apm.application-packages=co.id.bankdki.multibiller.config
elastic.apm.log-level=INFO

core-svc.overbooking= http://${CORE_HOST:10.100.112.88}:${CORE_PORT:1203}/microservices_core/service/overbooking
core-svc.reversal= http://${CORE_HOST:10.100.112.88}:${CORE_PORT:1203}/microservices_core/service/overbooking_reversal
cardless-svc.codebooking-create= http://10.100.112.88:9000/cardless-svc/create-code-booking

#endpoint core jurnal
coredki-svc.debit-payment=http://10.100.112.127:9881/converternewcams

#endpoint va-spe
vaspe-svc.debit-inquiry=http://10.100.112.127:3707/spe/inquiry/va_debit
vaspe-svc.debit-payment=http://10.100.112.127:3707/spe/payment/va_debit
vaspe-svc.debit-cek-status=http://10.100.112.127:3707/spe/inquiry/status

qris.mpm.inquiry=http://10.100.112.127:10977/qris/mpm/inquiry
qris.mpm.payment=http://10.100.112.127:10977/qris/mpm/payment
qris.mpm.cek.status=http://10.100.112.127:10977/qris/mpm/cek_status

#multibiller-v2
#sourceAccount.bpruniversal=10115087977
#sourceAccount.bankcapital=10115087977
#sourceAccount.bankdki=10115087977

#SELECT date,
#message_data -> 'service' as service,
#message_data -> 'message_direction' as message_direction,
#message_data -> 'retrieval_number' as retrieval_number,
#message_data -> 'message_data' -> 'payload' as payload
#FROM openapi_svc;